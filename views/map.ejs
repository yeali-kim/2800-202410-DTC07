<%- include("templates/header") %>
    <style>
        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 10;
        }

        .modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 20;
            border-radius: 10px;
        }
    </style>

    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

    <div class="flex items-center justify-center m-3 mt-24" id="mapContainer">
        <div id="map" class="w-full h-full"></div>
    </div>

    <!-- List view button on top right corner of map-->
    <div class="absolute top-24 right-3 m-3">
        <button class="list-button bg-white rounded-full shadow-lg py-2 px-4 font-bold text-gray-900">
            List View
        </button>
    </div>

    <!-- Arbitrary filter button -->
    <div class="absolute top-36 right-3 m-3">
        <button class="filter-button bg-white rounded-full shadow-lg py-2 px-4 font-bold text-gray-900">
            Filter
        </button>
    </div>
    <div id="overlay" class="overlay hidden"></div>
    <%- include('filter') %>


        <script>
            const criminals = [
                {
                    firstName: "Shawn",
                    middleName: "",
                    lastName: "Rim",
                    address: {
                        address: "645 Seymour St",
                        city: "Vancouver",
                        province: "BC",
                        country: "Canada",
                        postalCode: "V6C 1Z6",
                    },
                    dob: new Date("Aug. 4, 2004"),
                    gender: "M",
                    image: "https://picsum.photos/id/237/200/300",
                    physicalDescriptions: [
                        "description1",
                        "description2",
                        "description3",
                        "description4",
                    ],
                    convictions: [
                        {
                            crime: "Aggrevated assault",
                            date: new Date("May 15, 2024"),
                            sentence: "2 years imprisonment",
                        },
                        {
                            crime: "Robbery",
                            date: new Date("Dec. 25, 2022"),
                            sentence: "$200 fine",
                        },
                    ]
                }];

            // Define map height/size
            const mapContainer = document.getElementById('mapContainer');
            mapContainer.style.height = "calc(94vh - 56px)";

            // Add an info bubble
            function addInfoBubble(map, marker, content) {
                const infoWindow = new google.maps.InfoWindow({
                    content: content
                });

                marker.addListener('click', () => {
                    infoWindow.open(map, marker);
                });
            }


            // Filter criminals


            // function applyFilters() {
            //     const filters = {
            //         name: document.getElementById('name').value,
            //         crimes: Array.from(document.querySelectorAll('input[name="crime"]:checked')).map(input => input.value),
            //         sentenceMin: document.getElementById('sentence-min').value,
            //         sentenceMax: document.getElementById('sentence-max').value,
            //     };
            //     const filteredCriminals = criminals.filter(criminal => {
            //         // Replace these with your actual filter conditions
            //         const nameMatches = filters.name === '' || criminal.name.includes(filters.name);
            //         const crimeMatches = filters.crimes.length === 0 || filters.crimes.includes(criminal.crime);
            //         const sentenceMatches = (filters.sentenceMin === '' || criminal.sentence >= parseInt(filters.sentenceMin)) &&
            //             (filters.sentenceMax === '' || criminal.sentence <= parseInt(filters.sentenceMax));

            //         return nameMatches && crimeMatches && sentenceMatches;
            //     });

            //     // Clear existing markers
            //     for (let i = 0; i < criminalMarkers.length; i++) {
            //         criminalMarkers[i].setMap(null);
            //     }
            //     criminalMarkers = [];
            //     const geocoder = new google.maps.Geocoder();
            //     // Add new markers for each filtered criminal
            //     filteredCriminals.forEach(criminal => {
            //         geocoder.geocode({ address: criminal.address }, (results, status) => {
            //             if (status === 'OK') {
            //                 const marker = new google.maps.Marker({
            //                     position: results[0].geometry.location,
            //                     map: map
            //                 });
            //                 criminalMarkers.push(marker);
            //             } else {
            //                 console.error('Geocode was not successful for the following reason: ' + status);
            //             }
            //         });
            //     });
            // }


            // Initialize map
            function initMap() {
                // location of bcit (default location)
                const bcit = { lat: 49.283, lng: -123.115 };
                // Map is centered at BCIT with zoom level 17 (higher->closer)
                const map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 17,
                    center: bcit,
                    fullscreenControl: false,
                    mapTypeControl: false,
                    keyboardShortcuts: false,
                });
                // bcit(current location) marker
                const marker = new google.maps.Marker({
                    position: bcit,
                    map: map,
                    icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' // Blue marker(can change)
                });

                // Info bubble tells user that this is their current location
                addInfoBubble(map, marker, "Your current location")

                // Create a single InfoWindow instance
                const infoWindow = new google.maps.InfoWindow();
                const geocoder = new google.maps.Geocoder();


                // Add red marker for each criminal location
                let criminalMarkers = [];
                criminals.forEach(criminal => {
                    geocoder.geocode({ address: criminal.address.address }, (results, status) => {
                        if (status === 'OK') {
                            const criminalMarker = new google.maps.Marker({
                                map: map,
                                position: results[0].geometry.location,
                                title: criminal.name,
                                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png' // Red marker
                            });
                            criminalMarkers.push(criminalMarker);

                            // Define the content for the InfoWindow
                            const infoWindowContent = `
                        <div style="font-size: 16px;">
                            <h2 style="font-weight: bold;">${criminal.firstName} ${criminal.middleName} ${criminal.lastName}</h2>
                            <p>Number of convictions: ${criminal.convictions.length}</p>
                            <a style="font-size: 12px; color: grey;" href="/criminal/${criminal.id}">Details</a>
                        </div>
                    `;
                            // Add a click listener to the marker
                            criminalMarker.addListener('click', () => {
                                // Set the content and open the InfoWindow
                                infoWindow.setContent(infoWindowContent);
                                infoWindow.open(map, criminalMarker);
                            });
                        }
                    });
                });
            }

            // List button redirects to list view
            const listButton = document.querySelector('.list-button');
            listButton.addEventListener('click', () => {
                window.location.href = '/list';
            });

            // Filter button opens filter modal
            document.querySelector('.filter-button').addEventListener('click', function () {
                document.getElementById('overlay').classList.remove('hidden');
                document.getElementById('filter-form').classList.remove('hidden');
            });

            // Close filter modal
            function closeFilters() {
                document.getElementById('overlay').classList.add('hidden');
                document.getElementById('filter-form').classList.add('hidden');
            }

        </script>

        <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&callback=initMap">
            </script>

        </body>

        </html>