<%- include("templates/header") %>
    <style>
        .blur {
            filter: blur(5px);
        }
    </style>
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

    <div class="flex items-center justify-center m-3 mt-18" id="mapContainer">
        <div id="map" class="w-full h-full"></div>
    </div>

    <!-- List view button on top right corner of map-->
    <div class="absolute top-20 right-3 m-3">
        <button id="listBtn"
            class="list-button bg-white rounded-full shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] py-2 px-4 font-bold text-gray-900">
            List
        </button>
    </div>

    <!-- filter button -->
    <div class="absolute top-20 left-3 m-3">
        <button id="filterBtn" class="filter-button">
            <span
                class="material-symbols-outlined text-xl font-bold bg-white p-2 shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] rounded-full text-gray-900">filter_alt</span>
        </button>
    </div>

    <%- include("templates/filter") %>

        <!-- criminal modal -->
        <div id="criminalModal" class="fixed inset-0 flex items-center justify-center hidden bg-gray-800 bg-opacity-75">
            <div
                class="text-white bg-[#223053] p-4 rounded-lg overflow-hidden shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] transform transition-all mx-5">
                <div class="flex justify-between items-start">
                    <h5 class="text-xl font-bold" id="criminalModalLabel">Criminal Details</h5>
                    <button type="button" class="text-gray-400 text-xl" onclick="closeCriminalModal()">
                        <span class="sr-only">Close</span>
                        &times;
                    </button>
                </div>
                <div class="mt-2 text-center">
                    <img id="criminalImage" src="" alt="Criminal Image" class="w-32 h-32 rounded-full mx-auto mb-4" />
                </div>
                <h4 id="criminalName" class="text-xl font-bold text-center mb-2"></h4>
                <p id="criminalAge"></p>
                <p id="criminalAddress"></p>
                <p id="criminalGender"></p>
                <p id="criminalDescription"></p>
                <h5 class="mt-4 font-bold">Convictions</h5>
                <div class="bg-white text-black rounded-md m-1 max-h-48 overflow-y-auto p-3 mt-3">
                    <ol id="criminalConvictions" class="list-disc list-inside"></ol>
                </div>
                <div class="mt-2 text-right">
                    <a href="/protection">
                        <button type="button"
                            class="bg-cyan-600 hover:bg-cyan-900 font-bold text-white px-4 py-2 rounded-full"
                            onclick="closeCriminalModal()">
                            ProtectUs
                        </button>
                    </a>
                </div>
            </div>
        </div>

        <script>

            // Define map height/size
            const mapContainer = document.getElementById('mapContainer');
            mapContainer.style.height = "97vh";

            // Declare global variables
            let geocoder;
            let infoWindow;
            let criminalMarkers = [];

            // Add an info bubble
            function addInfoBubble(map, marker, content) {
                const infoWindow = new google.maps.InfoWindow({
                    content: content
                });

                marker.addListener('click', () => {
                    infoWindow.open(map, marker);
                });
            }

            var map;
            var marker;
            var userLocation;


            // Initialize map
            function initMap() {
                navigator.geolocation.getCurrentPosition(function (position) {
                    userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    map = new google.maps.Map(document.getElementById("map"), {
                        zoom: 17,
                        center: userLocation,
                        fullscreenControl: false,
                        mapTypeControl: false,
                        keyboardShortcuts: false,
                    });

                    marker = new google.maps.Marker({
                        position: userLocation,
                        map: map,
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                    });

                    addInfoBubble(map, marker, "Your current location");

                    infoWindow = new google.maps.InfoWindow();
                    geocoder = new google.maps.Geocoder();

                    criminalMarkers = [];
                    const criminals = JSON.parse('<%- JSON.stringify(criminals) %>');

                    criminals.forEach(criminal => {
                        geocoder.geocode({ address: criminal.address }, (results, status) => {
                            if (status === 'OK') {
                                const criminalMarker = new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location,
                                    title: criminal.name,
                                    icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
                                });
                                criminalMarkers.push(criminalMarker);

                                const generateInfoWindowContent = (criminal) => `
                        <div style="font-family: 'Arial', sans-serif; font-size: 16px; color: #333; line-height: 1.6; background-color: #f8f9fa; padding: 16px; border-radius: 8px;">
                            <h2 style="margin-bottom: 8px; font-weight: bold">${criminal.firstName} ${criminal.middleName} ${criminal.lastName}</h2>
                            <p style="margin-bottom: 16px;"><span style="font-weight: bold;"># of Convictions</span>: ${criminal.convictions.length}</p>
                            <div style="display: flex; justify-content: flex-end;">
                                <a style="font-size: 14px; color: #007bff; text-decoration: none; border-bottom: 1px solid #007bff; transition: border-bottom 0.3s ease;" href="#" class="details-link" data-criminal='${JSON.stringify(criminal)}'>Details</a>
                            </div>
                        </div>
                    `;

                                criminalMarker.addListener('click', () => {
                                    const content = generateInfoWindowContent(criminal);
                                    infoWindow.setContent(content);
                                    infoWindow.open(map, criminalMarker);

                                    infoWindow.addListener('domready', () => {
                                        document.querySelector('.details-link').addEventListener('click', (event) => {
                                            event.preventDefault();
                                            const criminalData = JSON.parse(event.target.getAttribute('data-criminal'));
                                            showCriminalModal(criminalData);
                                        });
                                    });
                                });
                            }
                        });
                    });

                    // Close the info bubble when clicking outside of it
                    map.addListener('click', () => {
                        infoWindow.close();
                    });

                }, function () {
                    const bcit = { lat: 49.28341676133127, lng: -123.11536009794918 };
                    map = new google.maps.Map(document.getElementById('map'), {
                        zoom: 17,
                        center: bcit,
                    });
                    marker = new google.maps.Marker({
                        position: bcit,
                        map: map,
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                    });

                    addInfoBubble(map, marker, "Your current location");

                    infoWindow = new google.maps.InfoWindow();
                    geocoder = new google.maps.Geocoder();

                    criminalMarkers = [];
                    const criminals = JSON.parse('<%- JSON.stringify(criminals) %>');

                    criminals.forEach(criminal => {
                        geocoder.geocode({ address: criminal.address }, (results, status) => {
                            if (status === 'OK') {
                                const criminalMarker = new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location,
                                    title: criminal.name,
                                    icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'
                                });
                                criminalMarkers.push(criminalMarker);

                                const generateInfoWindowContent = (criminal) => `
                        <div style="font-family: 'Arial', sans-serif; font-size: 16px; color: #333; line-height: 1.6; background-color: #f8f9fa; padding: 16px; border-radius: 8px;">
                            <h2 style="margin-bottom: 8px; font-weight: bold">${criminal.firstName} ${criminal.middleName} ${criminal.lastName}</h2>
                            <p style="margin-bottom: 16px;"><span style="font-weight: bold;"># of Convictions</span>: ${criminal.convictions.length}</p>
                            <div style="display: flex; justify-content: flex-end;">
                                <a style="font-size: 14px; color: #007bff; text-decoration: none; border-bottom: 1px solid #007bff; transition: border-bottom 0.3s ease;" href="#" class="details-link" data-criminal='${JSON.stringify(criminal)}'>Details</a>
                            </div>
                        </div>
                    `;

                                criminalMarker.addListener('click', () => {
                                    const content = generateInfoWindowContent(criminal);
                                    infoWindow.setContent(content);
                                    infoWindow.open(map, criminalMarker);

                                    infoWindow.addListener('domready', () => {
                                        document.querySelector('.details-link').addEventListener('click', (event) => {
                                            event.preventDefault();
                                            const criminalData = JSON.parse(event.target.getAttribute('data-criminal'));
                                            showCriminalModal(criminalData);
                                        });
                                    });
                                });
                            }
                        });
                    });

                    map.addListener('click', () => {
                        infoWindow.close();
                    });
                });
            }


            // Show criminal detail modal
            function showCriminalModal(criminal) {
                document.getElementById('criminalImage').src = criminal.image;
                document.getElementById('criminalName').innerText = `${criminal.firstName} ${criminal.middleName} ${criminal.lastName}`;
                document.getElementById('criminalAddress').innerText = `Address: ${criminal.address}`;
                document.getElementById('criminalGender').innerText = `Gender: ${criminal.gender}`;
                const physicalDescriptions = criminal.physicalDescriptions.join(', ');
                const physicalDescriptionsContainer = document.getElementById('criminalDescription');
                physicalDescriptionsContainer.innerHTML = `
            <div class="mt-3 rounded-lg overflow-y-scroll bg-white text-black p-5">
              <p class="font-bold">Physical Description:</p>
              <p>${physicalDescriptions}</p>
            </div>
            `;
                // calculate current age based on dob and device current date
                const dob = new Date(criminal.dob);
                const formattedDob = dob.toLocaleDateString('en-US'); // Format the date
                const diff_ms = Date.now() - dob.getTime();
                const age_dt = new Date(diff_ms);
                const age = Math.abs(age_dt.getUTCFullYear() - 1970);
                document.getElementById('criminalAge').innerText = `Age: ${age}`;

                const convictionsList = document.getElementById('criminalConvictions');
                convictionsList.innerHTML = ''; // Clear previous content

                // Iterate through criminal convictions and create list items
                criminal.convictions.forEach(conviction => {
                    const listItem = document.createElement('div');
                    const convictionDate = new Date(conviction.date);
                    listItem.innerHTML = `
            <p class="font-bold underline underline-offset-4"><strong>Crime:</strong> ${conviction.crime}</p>
            <p><strong>Date:</strong> ${convictionDate.toLocaleDateString()}</p>
            <p class="pb-3"><strong>Sentence:</strong> ${conviction.sentence}</p>
            `;

                    convictionsList.appendChild(listItem);
                });

                document.getElementById('criminalModal').classList.remove('hidden');
                document.getElementById('map').classList.add('blur');
                document.getElementById('filterBtn').classList.add('blur');
                document.getElementById('listBtn').classList.add('blur');
            }


            // close criminal detail modal
            function closeCriminalModal() {
                document.getElementById('criminalModal').classList.add('hidden');
                document.getElementById('map').classList.remove('blur');
                document.getElementById('filterBtn').classList.remove('blur');
                document.getElementById('listBtn').classList.remove('blur');
            };

            // List button redirects to list view
            const listButton = document.querySelector('.list-button');
            listButton.addEventListener('click', () => {
                window.location.href = '/list';
            });

            // Filter button opens filter modal
            document.querySelector('.filter-button').addEventListener('click', function () {
                document.getElementById('filter-form').classList.remove('hidden');
                document.getElementById('map').classList.add('blur');
                document.getElementById('filterBtn').classList.add('blur');
                document.getElementById('listBtn').classList.add('blur');
            });

            // Close filter modal
            function closeFilters() {
                document.getElementById('filter-form').classList.add('hidden');
                document.getElementById('map').classList.remove('blur');
                document.getElementById('filterBtn').classList.remove('blur');
                document.getElementById('listBtn').classList.remove('blur');
            }

            // Function to apply filters
            function applyFilters() {
                const name = document.getElementById('name').value.toLowerCase();
                const crime = document.getElementById('crime').value.toLowerCase();
                const sentenceMin = document.getElementById('sentence-min').value;
                const sentenceMax = document.getElementById('sentence-max').value;

                fetch(`/filterCriminals?name=${name}&crime=${crime}&sentenceMin=${sentenceMin}&sentenceMax=${sentenceMax}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateMapMarkers(data.criminals);
                            closeFilters();
                        } else {
                            console.error(data.message);
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            // Function to update map markers
            function updateMapMarkers(criminals) {
                // Clear existing markers
                criminalMarkers.forEach(marker => marker.setMap(null));
                criminalMarkers = [];

                // Add new markers based on filtered criminals
                criminals.forEach(criminal => {
                    geocoder.geocode({ address: criminal.address }, (results, status) => {
                        if (status === 'OK') {
                            const criminalMarker = new google.maps.Marker({
                                map: map,
                                position: results[0].geometry.location,
                                title: criminal.name,
                                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png' // Red marker
                            });
                            criminalMarkers.push(criminalMarker);

                            const generateInfoWindowContent = (criminal) => `
                                <div style="font-family: 'Arial', sans-serif; font-size: 16px; color: #333; line-height: 1.6; background-color: #f8f9fa; padding: 16px; border-radius: 8px;">
                                    <h2 style="margin-bottom: 8px; font-weight: bold">${criminal.firstName} ${criminal.middleName} ${criminal.lastName}</h2>
                                    <p style="margin-bottom: 16px;"><span style="font-weight: bold;"># of Convictions</span>: ${criminal.convictions.length}</p>
                                    <div style="display: flex; justify-content: flex-end;">
                                        <a style="font-size: 14px; color: #007bff; text-decoration: none; border-bottom: 1px solid #007bff; transition: border-bottom 0.3s ease;" href="#" class="details-link" data-criminal='${JSON.stringify(criminal)}'>Details</a>
                                    </div>
                                </div>
                            `;

                            criminalMarker.addListener('click', () => {
                                const content = generateInfoWindowContent(criminal);
                                infoWindow.setContent(content);
                                infoWindow.open(map, criminalMarker);

                                infoWindow.addListener('domready', () => {
                                    document.querySelector('.details-link').addEventListener('click', (event) => {
                                        event.preventDefault();
                                        const criminalData = JSON.parse(event.target.getAttribute('data-criminal'));
                                        showCriminalModal(criminalData);
                                    });
                                });
                            });
                        }
                    });
                });
            }

            function search() {
                document.getElementById('searchBar').addEventListener("keydown", async function (e) {
                    if (e.key === 'Enter') {
                        const search = document.getElementById('searchBar').value.toLowerCase();

                        try {
                            const searchAddress = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(search)}&key=<%= apiKey %>`);
                            const searchJson = await searchAddress.json();
                            userLocation = searchJson.results[0].geometry.location;
                            console.log(userLocation)
                        } catch (error) {
                            var searchCoordinate = { lat: 49.28341676133127, lng: -123.11536009794918 };
                            userLocation = searchCoordinate; // Assign the default location to userLocation
                        };

                        // Center the map to the searched location while keeping user location marker
                        map.setCenter(userLocation);
                    }
                });
            }


            document.addEventListener("DOMContentLoaded", function () {

                search();

            });
        </script>

        <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>&callback=initMap">
        </script>

        </body>

        </html>