<%- include('templates/headerHamburgerOnly') %>

<!-- CSS to hide elements with the hidden class -->
<style>
  .hidden {
    display: none;
    /* Corrected to 'none' to hide the element */
  }
</style>

<!-- Header section displaying the user's profile picture and username -->
<header class="text-white text-4xl text-center mx-4 mt-32 flex gap-3">
  <!-- User's profile icon -->
  <span class="material-symbols-outlined text-7xl"> account_circle </span>
  <!-- Display user's username -->
  <span class="flex text-center items-center"><%= user.username %></span>
</header>

<!-- Section displaying user's address and email -->
<div class="flex mx-5 my-6 gap-3 text-slate-300 flex-col">
  <!-- User's address -->
  <span class="flex items-center text-center">
    <span class="material-symbols-outlined me-3"> home </span>
    <span><%= user.address %></span>
  </span>
  <!-- User's email -->
  <span class="flex items-center text-center">
    <span class="material-symbols-outlined me-3"> mail </span>
    <span> <%= user.email %> </span>
  </span>
</div>

<!-- Button to show the profile edit form -->
<div class="flex justify-center text-center">
  <button class="flex justify-center items-center bg-[#EAD797] text-[#515F84] p-1 w-[120px] rounded-xl border-double border-4 border-[#515F84] text-center" onclick="showEdit()">
    <!-- Icon and label for the edit button -->
    <span class="material-symbols-outlined"> edit </span>
    Edit
  </button>
</div>

<!-- Form for editing user profile, initially hidden -->
<form class="w-[70%] mx-auto bg-[#EAD797] flex flex-col justify-center p-10 text-[#515F84] rounded-xl gap-5 mt-3 hidden" id="profileForm" method="POST" action="/updateProfile">
  <!-- Hidden input to specify the HTTP method as PUT -->
  <input type="hidden" name="_method" value="PUT" />
  <div>
    <!-- Label and input for editing username -->
    <label for="username" class="text-xl">Username</label>
    <input id="username" type="text" name="username" value="<%= user.username %>" class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
  </div>
  <div>
    <!-- Label and input for editing email -->
    <label for="email" class="text-xl">Email</label>
    <input id="email" type="email" name="email" value="<%= user.email %>" class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
  </div>
  <div>
    <!-- Label and input for editing address -->
    <label for="address" class="text-xl">Address</label>
    <input id="address" type="text" name="address" value="<%= user.address %>" class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
  </div>
  <div class="w-full flex flex-row justify-start align-center text-white">
    <!-- Link to change password -->
    <a href="/resetPasswordProfile" class="text-[#515F84] underline">Change Password</a>
  </div>
  <div class="w-full flex flex-row justify-center align-center text-white">
    <!-- Submit button for saving profile changes -->
    <button type="submit" id="saveBtn" class="bg-[#515F84] rounded-xl px-4 py-2" onclick="saveEdit()">
      Save
    </button>
  </div>
</form>
<br />

<!-- Order History section -->
<div class="flex justify-center">
  <section class="container mx-4 mb-4 flex flex-col items-center bg-slate-200 p-4 rounded-lg gap-2 text-[#515F84] border-double border-4 border-[#515F84]">
    <!-- Order History header with icon -->
    <div class="text-4xl p-4 items-center flex gap-4" id="orderHistoryDiv">
      <span class="material-symbols-outlined text-6xl">
        receipt_long
      </span>
      <div>Order History</div>
    </div>
    <!-- Loop through user's order history and include order history template for each order -->
    <% user.orderHistory.slice().reverse().forEach((order) => { %>
    <%- include("templates/orderHistory", {order: order}) %>
    <% }); %>
  </section>
</div>

<!-- Script to fetch and display product information based on order ID -->
<script>
  async function displayProductInformation(orderID) {
    // Fetch product details by order ID
    const product = await (
      await fetch(
        `/getProduct?model=${orderID}`
      )
    ).json();

    // If product has a manufacturer, display model and manufacturer
    if (product.manufacturer) {
      const model = document.createElement("div");
      model.innerText = product.model;
      const manufacturer = document.createElement("div");
      manufacturer.innerText = product.manufacturer;

      productDiv.appendChild(model);
      productDiv.appendChild(manufacturer);
    } else {
      // If no manufacturer, display 'Cybersecurity'
      const cyberDiv = document.createElement("div");
      cyberDiv.innerText = "Cybersecurity";
      productDiv.appendChild(cyberDiv);
    }
    const type = document.createElement("div");
    const price = document.createElement("div");
  }

  // Fetch and display product information for each order summary
  const orderSummaries = document.querySelectorAll(".orderSummaryDiv");
  orderSummaries.forEach(async (summary) => {
    // Fetch product details by order summary ID
    const product = await (
      await fetch(
        `/getProduct?id=${summary.id}`
      )
    ).json();

    const productDiv = summary.querySelector("#productDiv");
    const priceDiv = summary.querySelector("#priceDiv");

    // If product has a manufacturer, display model and manufacturer with styling
    if (product.manufacturer) {
      const model = document.createElement("div");
      model.innerText = product.model;
      model.classList.add("font-bold");
      const manufacturer = document.createElement("div");
      manufacturer.innerText = product.manufacturer;

      productDiv.appendChild(model);
      productDiv.appendChild(manufacturer);
    } else {
      // If no manufacturer, display 'Cybersecurity' with styling
      const cyberDiv = document.createElement("div");
      cyberDiv.innerText = "Cybersecurity";
      cyberDiv.classList.add("font-bold");
      productDiv.appendChild(cyberDiv);
    }

    // Display product type and price with styling
    const type = document.createElement("div");
    const price = document.createElement("div");
    type.innerText = product.type;
    price.innerText = `$${product.price["$numberDecimal"]}`;
    price.classList.add("font-bold");

    productDiv.appendChild(type);
    priceDiv.appendChild(price);
  });
</script>

<!-- Script to handle profile form submission and toggling form visibility -->
<script>
  // Add event listener for profile form submission
  document
    .getElementById("profileForm")
    .addEventListener("submit", async (event) => {
      event.preventDefault(); // Prevent default form submission

      // Get input values from form fields
      const usernameField = document.getElementById("username");
      const emailField = document.getElementById("email");
      const addressField = document.getElementById("address");

      const updatedUser = {
        username: usernameField.value,
        email: emailField.value,
        address: addressField.value,
      };

      try {
        // Send PUT request to update profile
        const response = await fetch("/updateProfile", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedUser),
        });

        if (response.ok) {
          const data = await response.json();
          console.log("Success:", data);
          location.reload(); // Reload the page to reflect updated data
        } else {
          console.error("Error:", response.statusText);
        }
      } catch (error) {
        console.error("Error:", error);
      }
    });

  // Function to toggle visibility of profile form
  function showEdit() {
    menu = document.getElementById("profileForm");
    menu.classList.toggle("hidden");
  }
  // Function to hide profile form after saving
  function saveEdit() {
    menu = document.getElementById("profileForm");
    menu.classList.toggle("hidden");
  }
</script>

<%- include('templates/footer') %>
