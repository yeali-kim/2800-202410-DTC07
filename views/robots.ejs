<%- include('templates/header') %>
    <style>
        #filter,
        #sort {
            display: flex;
            flex-direction: column;
            position: absolute;
            background-color: white;
            color: black;
            border-radius: 100px;
            padding: 4px;
            padding-left: 12px;
            padding-right: 12px;
            width: 50px;
            height: 34px;
            transition-property: all;
            transition-duration: 0.5s;
        }

        .expand {
            border-radius: 10px !important;
            width: 305px !important;
            height: 300px !important;
            box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);
            padding-top: 5px;
        }

        .expand-sort {
            border-radius: 10px !important;
            width: 260px !important;
            height: 220px !important;
            box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);
        }

        .back-button {
            position: absolute;
            top: 60px;
            left: 0px;
        }

        .noUi-target,
        .noUi-ltr,
        .noUi-horizontal {
            height: 7px;
            width: 90%;

        }

        .range-slider .noUi-connect,
        .range-slider .noUi-connects,
        .range-slider .noUi-base {
            height: 7px;
        }

        .range-slider .noUi-handle {
            height: 18px;
            width: 18px;
            top: -5px;
            right: -9px;
            border-radius: 9px;
        }

        .range-slider {
            height: 10px;
        }

        .range-slider .noUi-connect {
            background: #0891b2;
        }

        .range-slider .noUi-handle {
            height: 18px;
            width: 18px;
            top: -5px;
            right: -9px;
            /* half the width */
            border-radius: 9px;
        }
    </style>

    <a href="/protection" class="back-button">
        <span
            class="material-symbols-outlined absolute top-0 left-0 mt-4 ml-4 inline-block px-3 py-1 bg-[#515F84] rounded-lg text-[#EAD797]">
            arrow_back_ios
        </span>
    </a>
    <div class="flex justify-center mt-32 mb-14">
        <h1 class="font-bold text-white text-4xl">Guardian Robots</h1>
    </div>

    <div class="container flex mb-8">
        <!-- Filter button -->
        <div class="ms-4">
            <button class="z-10 shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)]" id="filter">
                <span class="material-symbols-outlined"> filter_alt </span>
            </button>
        </div>

        <!-- Sort button -->
        <div class="ms-12 ps-2">
            <button class="shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)]" id="sort">
                <span class="material-symbols-outlined"> Sort </span>
            </button>
        </div>
    </div>

    <!-- Robot cards -->
    <div id="robot-container" class="flex flex-wrap items-center" data-robots="<%- JSON.stringify(robots) %>">
        <% robots.forEach(function(robot) { %>
            <div class="item m-4 w-full bg-white h-full shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] rounded-lg overflow-hidden text-center"
                data-manufacturer="<%= robot.manufacturer %>" data-type="<%= robot.type %>"
                data-price="<%= robot.price %>">
                <div class="p-6 flex justify-between flex-col">
                    <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                        Model
                    </h2>
                    <h1 class="title-font text-lg font-medium text-gray-900 mb-3">
                        <%= robot.model %>
                    </h1>
                    <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                        Manufacturer
                    </h2>
                    <p class="leading-relaxed mb-3">
                        <%= robot.manufacturer %>
                    </p>
                    <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                        Price
                    </h2>
                    <p class="leading-relaxed mb-3">$<%= robot.price %> / month</p>
                    <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                        Type
                    </h2>
                    <p class="leading-relaxed mb-3">
                        <%= robot.type %>
                    </p>
                    <button type="button" data-modal-toggle="robot-modal" id="<%=robot.id %>"
                        class="orderBtn flex bg-cyan-600 px-4 py-2 mt-2 mx-12 justify-center text-white font-bold rounded-full">
                        Place an Order
                    </button>
                </div>
            </div>
            <% }); %>
    </div>

    <%- include('templates/orderSummary', { user: user, btnClass: "orderBtn" } ) %>
        <%- include('templates/footer') %>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const filterBtn = document.getElementById("filter");
                    const sortBtn = document.getElementById("sort");

                    const initialFilterHTML = filterBtn.innerHTML;
                    const initialFilterWidth = filterBtn.style.width;
                    const initialFilterHeight = filterBtn.style.height;

                    const initialSortHTML = sortBtn.innerHTML;
                    const initialSortWidth = sortBtn.style.width;
                    const initialSortHeight = sortBtn.style.height;

                    // Expand filter button and display filter options
                    function expandFilter() {
                        filterBtn.classList.toggle("expand");
                        if (filterBtn.classList.contains("expand")) {
                            collapseSort();
                            filterBtn.removeEventListener("click", expandFilter);
                            setTimeout(() => {
                                filterBtn.innerHTML = `
                                    <div class='w-full flex justify-start pt-2'>
                                        <button id='closeButton'>
                                            <span class='material-symbols-outlined'>
                                                close
                                            </span>
                                        </button>
                                    </div>
                                    <div class='text-start w-full h-full flex flex-col justify-between gap-5 p-3'>
                                        <div class="range-slider">
                                            <label for="priceRange">Price: </label>
                                            <div id="priceRange"></div>
                                            <div>
                                                <span id="minPriceValue">0</span> -
                                                <span id="maxPriceValue">10000</span>
                                            </div>
                                        </div>
                                        <div class="mt-[20px]">
                                            <label for='manufacturerFilter'>Manufacturer: </label>
                                            <select id='manufacturerFilter'>
                                                <option value=''>All</option>
                                                <% uniqueManufacturers.forEach(manufacturer => { %>
                                                    <option value='<%= manufacturer %>'><%= manufacturer %></option>
                                                <% }); %>
                                            </select>
                                        </div>
                                        <div>
                                            <label for='typeFilter'>Type: </label>
                                            <select id='typeFilter'>
                                                <option value=''>All</option>
                                                <% uniqueTypes.forEach(type => { %>
                                                    <option value='<%= type %>'><%= type %></option>
                                                <% }); %>
                                            </select>
                                        </div>
                                        <div class="flex justify-end">
                                            <button id="filterOkButton" class="flex justify-center items-center w-10 bg-blue-500 text-white rounded px-4 py-2 mt-2">OK</button>
                                        </div>
                                    </div>
                                `;
                                const closeBtn = filterBtn.querySelector('#closeButton');
                                closeBtn.addEventListener('click', expandFilter);
                                const filterOkButton = filterBtn.querySelector('#filterOkButton');
                                filterOkButton.addEventListener('click', filterRobots);
                                document.addEventListener(
                                    "click",
                                    closeFilterOnClickOutside
                                );

                                // Initialize noUiSlider for price range filter
                                // I found this code on the noUiSlider documentation
                                //
                                // @see https://refreshless.com/nouislider/
                                var priceSlider = document.getElementById('priceRange');
                                console.log(priceSlider);
                                noUiSlider.create(priceSlider, {
                                    start: [0, 10000],
                                    connect: true,
                                    range: {
                                        'min': 0,
                                        'max': 10000
                                    },
                                    step: 100,
                                    tooltips: [false, false],
                                    format: {
                                        to: function (value) {
                                            return parseInt(value);
                                        },
                                        from: function (value) {
                                            return parseInt(value);
                                        }
                                    }
                                });

                                priceSlider.noUiSlider.on('update', function (values, handle) {
                                    document.getElementById('minPriceValue').innerText = values[0];
                                    document.getElementById('maxPriceValue').innerText = values[1];
                                });
                            }, 500);
                        } else {
                            setTimeout(() => {
                                filterBtn.addEventListener('click', expandFilter);
                            }, 500);
                            filterBtn.innerHTML = initialFilterHTML;
                            filterBtn.style.width = initialFilterWidth;
                            filterBtn.style.height = initialFilterHeight;
                        }
                    }

                    // Expand sort button and display sort options
                    function expandSort() {
                        sortBtn.classList.toggle("expand-sort");
                        if (sortBtn.classList.contains("expand-sort")) {
                            collapseFilter();
                            sortBtn.removeEventListener("click", expandSort);
                            setTimeout(() => {
                                sortBtn.innerHTML = `
                                    <div class='w-full flex justify-start pt-2'>
                                        <button id='closeButton'>
                                            <span class='material-symbols-outlined'>
                                                close
                                            </span>
                                        </button>
                                    </div>
                                    <div class='text-start w-full h-full flex flex-col gap-3'>
                                        <button value="manufacturer" onclick="sortRobots('manufacturer')">Manufacturer</button>
                                        <button value="type" onclick="sortRobots('type')">Type</button>
                                        <button value="price-asc" onclick="sortRobots('price-asc')">Price: Low to High</button>
                                        <button value="price-desc" onclick="sortRobots('price-desc')">Price: High to Low</button>
                                    </div>
                                `;
                                const closeBtn = sortBtn.querySelector("#closeButton");
                                closeBtn.addEventListener("click", expandSort);
                                document.addEventListener("click", closeSortOnClickOutside);
                            }, 500);
                        } else {
                            setTimeout(() => {
                                sortBtn.addEventListener("click", expandSort);
                            }, 500);
                            sortBtn.innerHTML = initialSortHTML;
                            sortBtn.style.width = initialSortWidth;
                            sortBtn.style.height = initialSortHeight;
                        }
                    }

                    // Collapse filter button and hide filter options
                    function collapseFilter() {
                        if (filterBtn.classList.contains("expand")) {
                            filterBtn.classList.remove("expand");
                            filterBtn.innerHTML = initialFilterHTML;
                            filterBtn.style.width = initialFilterWidth;
                            filterBtn.style.height = initialFilterHeight;
                            filterBtn.addEventListener("click", expandFilter);
                        }
                    }

                    // Collapse sort button and hide sort options
                    function collapseSort() {
                        if (sortBtn.classList.contains("expand-sort")) {
                            sortBtn.classList.remove("expand-sort");
                            sortBtn.innerHTML = initialSortHTML;
                            sortBtn.style.width = initialSortWidth;
                            sortBtn.style.height = initialSortHeight;
                            sortBtn.addEventListener("click", expandSort);
                        }
                    }

                    function closeFilterOnClickOutside(event) {
                        if (!filterBtn.contains(event.target)) {
                            collapseFilter();
                            document.removeEventListener(
                                "click",
                                closeFilterOnClickOutside
                            );
                        }
                    }

                    function closeSortOnClickOutside(event) {
                        if (!sortBtn.contains(event.target)) {
                            collapseSort();
                            document.removeEventListener("click", closeSortOnClickOutside);
                        }
                    }

                    // When filter and sort buttons are clicked, they expand and display options
                    filterBtn.addEventListener("click", expandFilter);
                    sortBtn.addEventListener("click", expandSort);

                    // Filtering robots based on selected options
                    // Generated by ChatGPT 4o
                    //
                    // @author https://chat.openai.com/
                    function filterRobots() {
                        const selectedType = document.getElementById('typeFilter').value;
                        const selectedManufacturer = document.getElementById('manufacturerFilter').value;
                        const minPrice = document.getElementById('minPriceValue').innerText;
                        const maxPrice = document.getElementById('maxPriceValue').innerText;

                        const queryParams = new URLSearchParams({
                            type: selectedType,
                            manufacturer: selectedManufacturer,
                            minPrice: minPrice,
                            maxPrice: maxPrice
                        }).toString();

                        window.location.href = `/robots?${queryParams}`;
                    }
                });

                // Sorting robots based on selected criteria
                // Generated by ChatGPT 3.5
                // 
                // @author https://chat.openai.com/

                let sortOrder = {
                    price: "asc",
                    manufacturer: "asc",
                    type: "asc",
                };

                // Function to sort robots based on criteria
                // Generated by ChatGPT 4o
                //
                // @author https://chat.openai.com/
                function sortRobots(criteria) {
                    // Get all elements with class "items"
                    const items = document.querySelectorAll(".item");

                    // Convert NodeList to Array
                    const itemsArray = Array.from(items);

                    // Sort the array based on the criteria
                    itemsArray.sort((a, b) => {
                        let aValue, bValue;

                        // Determine the values to compare based on the criteria
                        switch (criteria) {
                            case "manufacturer":
                                // If sorting by manufacturer, use the manufacturer data attribute
                                aValue = a.dataset.manufacturer.toLowerCase();
                                bValue = b.dataset.manufacturer.toLowerCase();
                                break;
                            case "type":
                                // If sorting by type, use the type data attribute
                                aValue = a.dataset.type.toLowerCase();
                                bValue = b.dataset.type.toLowerCase();
                                break;
                            case "price-asc":
                                // If sorting by price ascending, use the price data attribute
                                aValue = parseFloat(a.dataset.price);
                                bValue = parseFloat(b.dataset.price);
                                return aValue - bValue;
                            case "price-desc":
                                // If sorting by price descending, use the price data attribute
                                aValue = parseFloat(a.dataset.price);
                                bValue = parseFloat(b.dataset.price);
                                return bValue - aValue;
                        }

                        // Determine the sort order based on the sortOrder object
                        if (sortOrder[criteria] === "asc") {
                            if (aValue < bValue) return -1;
                            if (aValue > bValue) return 1;
                        } else {
                            if (aValue < bValue) return 1;
                            if (aValue > bValue) return -1;
                        }

                        // If values are equal, return 0
                        return 0;
                    });

                    // If sorting by manufacturer or type, toggle the sort order for the next sort
                    if (criteria === "manufacturer" || criteria === "type") {
                        sortOrder[criteria] = sortOrder[criteria] === "asc" ? "desc" : "asc";
                    }

                    // Clear the container
                    const container = document.getElementById("robot-container");
                    container.innerHTML = "";

                    // Append the sorted items to the container
                    itemsArray.forEach((item) => container.appendChild(item));

                    // Re-append sorted elements to the container
                    robots.forEach((robot) => robotContainer.appendChild(robot));

                    // Collapse the sort options
                    collapseSort();
                }

                // Custom JavaScript to handle filter toggle
                function filter() {
                    const filter = document.getElementById("filter");
                    filter.style.display =
                        filter.style.display === "none" ? "block" : "none";
                }

                // Custom JavaScript to handle modal toggle
                // Generated by ChatGPT 4o
                //
                // @author https://chat.openai.com/
                document.addEventListener("DOMContentLoaded", function () {
                    const modalToggleButtons = document.querySelectorAll(
                        "[data-modal-toggle]"
                    );
                    const modalHideButtons = document.querySelectorAll("[data-modal-hide]");
                    const modals = document.querySelectorAll(".hidden");
                    const modalBody = document.getElementById("modal-body");
                    const modalFooter = document.getElementById("modal-footer");
                    const bookNowButton = document.getElementById("book-now-button");
                    const orderButton = document.getElementById("order-button");
                    const homeButton = document.getElementById("home-button");

                    const initialModalBodyContent = modalBody.innerHTML;
                    const initialModalFooterContent = modalFooter.innerHTML;

                    // Add click event listener to each "Details" button
                    modalToggleButtons.forEach(function (button) {
                        button.addEventListener("click", function () {
                            // Show the modal
                            document
                                .getElementById("robot-modal")
                                .classList.remove("hidden");
                        });
                    });

                    // Add click event listener to each "Close" button
                    modalHideButtons.forEach(function (button) {
                        button.addEventListener("click", function () {
                            // Hide the modal
                            document.getElementById("robot-modal").classList.add("hidden");
                        });
                    });

                    function reassignEventListeners() {
                        bookNowButton.addEventListener("click", function () {
                            modalBody.innerHTML = `
                <div class="bg-gray-200 text-center py-10 rounded-lg">
                    <p class="text-lg">Order Template</p>
                </div>
                `;
                            bookNowButton.style.display = "none";
                            orderButton.style.display = "block";
                            homeButton.style.display = "none";
                        });

                        orderButton.addEventListener("click", function () {
                            modalBody.innerHTML = `
                <div class="bg-gray-200 text-center py-10 rounded-lg">
                    <p class="text-lg">Order Confirmation</p>
                </div>
                `;
                            orderButton.style.display = "none";
                            homeButton.style.display = "block";
                        });

                        homeButton.addEventListener("click", function () {
                            window.location.href = "/map";
                        });
                    }

                    modalToggleButtons.forEach((button) => {
                        button.addEventListener("click", function () {
                            const targetModalId = button.getAttribute("data-modal-target");
                            const targetModal = document.getElementById(targetModalId);
                            if (targetModal) {
                                targetModal.classList.remove("hidden");
                                targetModal.classList.add("flex");
                            }
                        });
                    });

                    modalHideButtons.forEach((button) => {
                        button.addEventListener("click", function () {
                            const targetModalId = button.getAttribute("data-modal-hide");
                            const targetModal = document.getElementById(targetModalId);
                            if (targetModal) {
                                targetModal.classList.add("hidden");
                                targetModal.classList.remove("flex");
                                // Reset modal content to initial state
                                modalBody.innerHTML = initialModalBodyContent;
                                modalFooter.innerHTML = initialModalFooterContent;
                                // Reassign event listeners after resetting content
                                reassignEventListeners();
                            }
                        });
                    });

                    // Initial assignment of event listeners
                    reassignEventListeners();
                });
            </script>