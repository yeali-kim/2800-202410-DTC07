<%- include("templates/header") %>

<!-- CSS styles for filter and sort buttons, including expanded state styles -->
<style>
  /* Base styles for filter and sort buttons */
  #filter,
  #sortButton {
    display: flex;
    flex-direction: column;
    position: absolute;
    background-color: white;
    color: black;
    border-radius: 100px;
    padding: 7px;
    padding-left: 12px;
    padding-right: 12px;
    width: 40px;
    height: 40px;
    transition-property: all;
    transition-duration: 0.5s;
  }

  /* Expanded state styles for filter button */
  .expand {
    border-radius: 10px !important;
    width: 300px !important;
    height: 300px !important;
    overflow: auto !important;
  }

  /* Expanded state styles for sort button */
  .expand-sort {
    border-radius: 10px !important;
    width: 200px !important;
    height: 150px !important;
    overflow: auto !important;
  }

  /* Styles for checkbox container and items */
  .checkbox-container {
    display: flex;
    flex-direction: column;
  }

  .checkbox-container label {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
  }

  .checkbox-container input[type="checkbox"] {
    margin-right: 8px;
  }

  /* Styles for detail button */
  .detail-button {
    height: 50px;
  }

  .detail-button span {
    display: inline-block;
    vertical-align: middle;
    line-height: normal;
  }
</style>

<!-- Main content area -->
<main class="bg-[#515F84] text-white p-4 mt-8">
  <div class="container mx-auto">
    <!-- Title of the page -->
    <h1 class="text-3xl font-bold mb-4 flex justify-center py-8">Criminals Near You</h1>
    <div class="flex justify-between mb-5">
      <!-- Filter button -->
      <div>
        <button class="shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)]" id="filter">
          <span class="material-symbols-outlined text-xl font-bold text-gray-900">filter_alt</span>
        </button>
        <div class="ms-12">
          <!-- Sort button -->
          <button class="shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] rounded-full" id="sortButton">
            <span class="material-symbols-outlined text-xl font-bold text-gray-900">sort</span>
          </button>
        </div>

        <!-- Script for filter and sort button functionality -->
        <script>
          // Function to expand and collapse the filter button
          function expandFilter() {
            const filterBtn = document.getElementById('filter');
            const sortBtn = document.getElementById('sortButton');
            filterBtn.classList.toggle("expand");
            if (filterBtn.classList.contains("expand")) {
              // Hide sort button when filter is expanded
              sortBtn.style.display = 'none';
              document.addEventListener('click', closeFilterOnClickOutside);
              filterBtn.innerHTML = `
                <div class="w-full flex justify-start">
                  <button id="closeButton">
                    <span class="material-symbols-outlined">close</span>
                  </button>
                </div>
                <div class="w-full flex flex-col items-start gap-2" id="filterOptions">
                  <label class="font-bold">Crime Type</label>
                  <div class="checkbox-container" id="crimeTypeContainer">
                    <label><input type="checkbox" value="aggravatedassault" onchange="filterByCrimeType()"> Aggravated assault</label>
                    <label><input type="checkbox" value="murder" onchange="filterByCrimeType()"> Murder</label>
                    <label><input type="checkbox" value="sexualassault" onchange="filterByCrimeType()"> Sexual assault</label>
                    <label><input type="checkbox" value="robbery" onchange="filterByCrimeType()"> Robbery</label>
                    <label><input type="checkbox" value="vandalism" onchange="filterByCrimeType()"> Vandalism</label>
                    <label><input type="checkbox" value="drugtrafficking" onchange="filterByCrimeType()"> Drug trafficking</label>
                    <label><input type="checkbox" value="identitytheft" onchange="filterByCrimeType()"> Identity theft</label>
                    <label><input type="checkbox" value="cyberattack" onchange="filterByCrimeType()"> Cyberattack</label>
                  </div>
                  <label class="font-bold">Imprisonment Duration (years)</label>
                  <input type="range" id="sentenceRange" min="0" max="25" value="0" oninput="updateSentenceRange()">
                  <div id="sentenceValue" class="w-1/2 text-center">0 years</div>
                  <label class="font-bold">Name</label>
                  <input type="text" id="nameFilter" class="border-2 p-2" placeholder="Enter name" oninput="filterByName()">
                  <button onclick="clearFilters()" class="mt-4 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Clear Filters</button>
                </div>
              `;

              // Close button event listener to collapse the filter
              const closeBtn = filterBtn.querySelector('#closeButton');
              closeBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                expandFilter();
              });

              // Prevent clicks inside the expanded filter from closing it
              const filterOptions = document.getElementById('filterOptions');
              filterOptions.addEventListener('click', function(event) {
                event.stopPropagation();
              });
            } else {
              // Show sort button when filter is collapsed
              sortBtn.style.display = 'flex';
              document.removeEventListener('click', closeFilterOnClickOutside);
              filterBtn.innerHTML = `<span class="material-symbols-outlined text-xl font-bold text-gray-900">filter_alt</span>`;
            }
          }

          
          /**
          * Function to close the filter when clicking outside of it
          * Generated by ChatGPT 4-o
          *
          * @author https://chat.openai.com/
          */
          function closeFilterOnClickOutside(event) {
            const btn = document.getElementById('filter');
            const sortBtn = document.getElementById('sortButton');
            if (!btn.contains(event.target)) {
              btn.classList.remove("expand");
              sortBtn.style.display = 'flex';
              document.removeEventListener('click', closeFilterOnClickOutside);
              btn.innerHTML = `<span class="material-symbols-outlined text-xl font-bold text-gray-900">filter_alt</span>`;
            }
          }

          // Add event listener to filter button to expand/collapse on click
          document.getElementById('filter').addEventListener("click", function(event) {
            event.stopPropagation();
            expandFilter();
          });

          // Function to expand and collapse the sort button
          function expandSort() {
            const btn = document.getElementById('sortButton');
            btn.classList.toggle("expand-sort");
            if (btn.classList.contains("expand-sort")) {
              document.addEventListener('click', closeSortOnClickOutside);
              btn.innerHTML = `
                <div class="w-full flex justify-start">
                  <button id="closeSortButton">
                    <span class="material-symbols-outlined">close</span>
                  </button>
                </div>
                <div class="text-center w-full h-full flex flex-col gap-3" id="sortOptions">
                  <button id="sortName" onclick="sortList('name')">Name</button>
                  <button id="sortCrimes" onclick="sortList('crimes')">Crimes</button>
                  <button id="sortDistance" onclick="sortList('distance')">Distance</button>
                </div>
              `;

              // Close button event listener to collapse the sort menu
              const closeBtn = btn.querySelector('#closeSortButton');
              closeBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                expandSort();
              });

              // Prevent clicks inside the expanded sort menu from closing it
              const sortOptions = document.getElementById('sortOptions');
              sortOptions.addEventListener('click', function(event) {
                event.stopPropagation();
              });
            } else {
              document.removeEventListener('click', closeSortOnClickOutside);
              btn.innerHTML = `<span class="material-symbols-outlined text-xl font-bold text-gray-900">sort</span>`;
            }
          }

          // Function to close the sort menu when clicking outside of it
          function closeSortOnClickOutside(event) {
            const btn = document.getElementById('sortButton');
            if (!btn.contains(event.target)) {
              btn.classList.remove("expand-sort");
              document.removeEventListener('click', closeSortOnClickOutside);
              btn.innerHTML = `<span class="material-symbols-outlined text-xl font-bold text-gray-900">sort</span>`;
            }
          }

          // Add event listener to sort button to expand/collapse on click
          document.getElementById('sortButton').addEventListener("click", function(event) {
            event.stopPropagation();
            expandSort();
          });

          // Function to update the sentence range display value
          function updateSentenceRange() {
            const sentenceRange = document.getElementById('sentenceRange').value;
            document.getElementById('sentenceValue').innerText = `${sentenceRange} years`;
            filterBySentenceRange();
          }

          // Function to filter criminals by name
          function filterByName() {
            const nameFilter = document.getElementById('nameFilter').value.toLowerCase();
            const cards = document.querySelectorAll('.criminal-card');
            cards.forEach(card => {
              const name = card.querySelector('.criminal-name').innerText.toLowerCase();
              card.style.display = name.includes(nameFilter) ? 'block' : 'none';
            });
          }

          // Function to filter criminals by imprisonment duration
          function filterBySentenceRange() {
            const sentenceRange = document.getElementById('sentenceRange').value;
            const cards = document.querySelectorAll('.criminal-card');
            cards.forEach(card => {
              const totalPrisonYears = parseInt(card.getAttribute('data-total-prison-years'), 10);
              card.style.display = totalPrisonYears >= sentenceRange ? 'block' : 'none';
            });
          }

          // Function to filter criminals by crime type
          function filterByCrimeType() {
            const checkboxes = document.querySelectorAll('.checkbox-container input[type="checkbox"]:checked');
            const selectedCrimeTypes = Array.from(checkboxes).map(checkbox => checkbox.value);
            const cards = document.querySelectorAll('.criminal-card');
            cards.forEach(card => {
              const crimes = card.getAttribute('data-crime-types').split(',');
              const match = selectedCrimeTypes.every(crimeType => crimes.includes(crimeType));
              card.style.display = selectedCrimeTypes.length === 0 || match ? 'block' : 'none';
            });
          }

          // Function to clear all filters
          function clearFilters() {
            document.getElementById('crimeTypeContainer').querySelectorAll('input[type="checkbox"]').forEach(checkbox => checkbox.checked = false);
            document.getElementById('sentenceRange').value = 0;
            document.getElementById('sentenceValue').innerText = '0 years';
            document.getElementById('nameFilter').value = '';
            const cards = document.querySelectorAll('.criminal-card');
            cards.forEach(card => card.style.display = 'block');
          }
        </script>
      </div>
      <!-- Button to navigate to the map page -->
      <button class="bg-white rounded-full shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] py-2 px-4 font-bold text-gray-900" onclick='location.href="/map"'>Map</button>
    </div>
    <!-- Loop through each criminal and display their information in a card -->
    <% criminals.forEach(function(criminal, index) { %>
    <div class="criminal-card bg-[#223053] p-4 rounded-lg shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] mb-4" onclick="hide('<%= criminal._id %>')" style="cursor: pointer;" data-id="<%= criminal._id %>" data-distance="<%= criminal.distance %>" data-total-prison-years="<%= criminal.totalPrisonYears %>" data-crime-types="<%= criminal.convictions.map(conviction => conviction.crime ? conviction.crime.replace(' ', '').toLowerCase() : '').join(',') %>">
      <div class="flex justify-between" id="sCard-<%= criminal._id %>">
        <div class="flex justify-start">
          <img style="height: 100px;" src="<%= criminal.image %>">
          <div class="flex-col mx-3">
            <!-- Display criminal's name and number of offenses -->
            <h2 class="criminal-name text-xl font-semibold">Name: <%= criminal.firstName %> <%= criminal.middleName %> <%= criminal.lastName %></h2>
            <p class="criminal-crimes">Number of offenses: <%= criminal.convictions.length %></p>
            <% if (criminal.distanceText) { %>
            <p class="criminal-distance">Distance: <%= criminal.distanceText %></p>
            <% } %>
          </div>
        </div>
        <!-- Button to show criminal details -->
        <button onclick="toggleDetails(event, '<%= criminal._id %>'); showCriminalDetail(<%= JSON.stringify(criminal) %>, '<%= criminal._id %>')" class="bg-cyan-600 hover:bg-cyan-900 text-white font-bold py-2 px-4 my-6 rounded-xl detail-button" id="detailButton-<%= criminal._id %>">
          <span>Details</span>
        </button>
      </div>
      <!-- Section to display detailed criminal information, initially hidden -->
      <div id="details-<%= criminal._id %>" class="hidden" style="transition: all 2s ease;">
        <div>
          <div>
            <img id="criminalImage" src="" alt="Criminal Image" class="w-32 h-32 rounded-full mx-auto mb-4" />
            <h4 id="criminalName" class="text-xl font-bold text-center mb-2"></h4>
            <p id="criminalAge"></p>
            <p id="criminalAddress"></p>
            <p id="criminalGender"></p>
            <% if (criminal.distanceText) { %>
            <p class="criminal-distance invisible">Distance: <%= criminal.distanceText %></p>
            <% } %>
            <div class="mt-3 rounded-lg overflow-y-scroll bg-white text-black p-5">
              <p class="font-bold">Physical Description:</p>
              <ul>
                <% criminal.physicalDescriptions.forEach(function(desc) { %>
                <li><%= desc %></li>
                <% }); %>
              </ul>
            </div>
            <h5 class="mt-4 font-bold">Convictions</h5>
            <div class="bg-white text-black rounded-md m-1 max-h-48 overflow-y-auto p-3 mt-3">
              <ul id="criminalConvictions" class="list-disc list-inside"></ul>
            </div>
          </div>
          <div class="text-right pt-5">
            <button class="rounded-full bg-cyan-600 p-2 px-3 hover:bg-cyan-900" onclick="location.href='/protection'">Protect Us</button>
          </div>
        </div>
      </div>
    </div>
    <% }); %>
  </div>
</main>

<!-- Script to handle various functionalities -->
<script>
  // Object to keep track of current sort order
  let currentSortOrder = {
    name: 'asc',
    crimes: 'asc',
    distance: 'asc'
  };

  // Function to toggle the display of detailed criminal information
  function toggleDetails(event, id) {
    event.stopPropagation(); // Prevent the click event from propagating to parent elements
    const details = document.getElementById('details-' + id); // Get the details element by id
    const button = document.getElementById('detailButton-' + id); // Get the detail button element by id
    const sCard = document.getElementById('sCard-' + id); // Get the summary card element by id
    details.style.display = details.style.display === 'block' ? 'none' : 'block'; // Toggle the display style of the details element
    if (details.style.display === 'block') { // If the details are displayed
      sCard.style.display = 'none'; // Hide the summary card
    }
  }

  // Function to hide the details section and show the summary card
  function hide(id) {
    const details = document.getElementById('details-' + id); // Get the details element by id
    const sCard = document.getElementById('sCard-' + id); // Get the summary card element by id
    if (details.style.display === 'block') { // If the details are displayed
      details.style.display = 'none'; // Hide the details
      sCard.style.display = 'flex'; // Show the summary card
    }
  }

  // Function to sort the list of criminals by specified criteria
  // Performs the sort
  // I got the idea of sorting on stackoverflow.com and w3schools.com
  // @see https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values
  // @see https://www.w3schools.com/jsref/jsref_localecompare.asp
  function sortList(criteria) {
    const cards = document.querySelectorAll('.criminal-card'); // Get all criminal card elements
    const cardArray = Array.from(cards); // Convert the NodeList to an array
    let sortedCards;

    // Sorting logic based on criteria
    if (criteria === 'name') { // If sorting by name
      sortedCards = cardArray.sort((a, b) => {
        const nameA = a.querySelector('.criminal-name')?.innerText.toLowerCase() || ''; // Get the name of the first card and convert to lowercase
        const nameB = b.querySelector('.criminal-name')?.innerText.toLowerCase() || ''; // Get the name of the second card and convert to lowercase
        return currentSortOrder.name === 'asc' ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA); // Compare names based on current sort order
      });
      currentSortOrder.name = currentSortOrder.name === 'asc' ? 'desc' : 'asc'; // Toggle the sort order
    } else if (criteria === 'crimes') { // If sorting by number of crimes
      sortedCards = cardArray.sort((a, b) => {
        const crimesA = parseInt(a.querySelector('.criminal-crimes')?.innerText.replace(/\D/g, '') || '0', 10); // Get the number of crimes for the first card
        const crimesB = parseInt(b.querySelector('.criminal-crimes')?.innerText.replace(/\D/g, '') || '0', 10); // Get the number of crimes for the second card
        return currentSortOrder.crimes === 'asc' ? crimesA - crimesB : crimesB - crimesA; // Compare number of crimes based on current sort order
      });
      currentSortOrder.crimes = currentSortOrder.crimes === 'asc' ? 'desc' : 'asc'; // Toggle the sort order
    } else if (criteria === 'distance') { // If sorting by distance
      sortedCards = cardArray.sort((a, b) => {
        const distanceA = parseFloat(a.querySelector('.criminal-distance')?.innerText.slice(10, 14) || '0'); // Get the distance for the first card
        const distanceB = parseFloat(b.querySelector('.criminal-distance')?.innerText.slice(10, 14) || '0'); // Get the distance for the second card
        return currentSortOrder.distance === 'asc' ? distanceA - distanceB : distanceB - distanceA; // Compare distances based on current sort order
      });
      currentSortOrder.distance = currentSortOrder.distance === 'asc' ? 'desc' : 'asc'; // Toggle the sort order
    }

    // Append sorted cards to the container
    const container = document.querySelector('.container'); // Get the container element
    sortedCards.forEach(card => container.appendChild(card)); // Append each sorted card to the container
  }

  // Function to calculate the distance between two geographic coordinates
  // Carculates the distance using coordinates
  // I found this code on stackoverflow.com
  // @author Derek
  // @see https://stackoverflow.com/questions/18883601/function-to-calculate-distance-between-two-coordinates
  function haversineDistance(lat1, lon1, lat2, lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = degreesToRadians(lat2 - lat1); // Convert the difference in latitude to radians
    var dLon = degreesToRadians(lon2 - lon1); // Convert the difference in longitude to radians
    var a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) + // Calculate the square of half the chord length between the points
      Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) * // Calculate the cosine of the latitude for both points
      Math.sin(dLon / 2) * Math.sin(dLon / 2); // Calculate the square of half the chord length between the points
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // Calculate the angular distance in radians
    var d = R * c; // Calculate the distance in km
    return d;
  }

  // Function to convert degrees to radians
  function degreesToRadians(degrees) {
    return degrees * (Math.PI / 180); // Convert degrees to radians
  }

  // Function to initialize the map and calculate distances between the user and criminals
  async function initMap(criminals, user) {
    navigator.geolocation.getCurrentPosition(async function(position) {
      const userLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      }

      // Geocode criminal addresses to get their locations
      const geocodedLocations = await Promise.all(criminals.map(async (criminal) => {
        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(criminal.address)}&key=<%= apiKey %>`); // Fetch geocoded data for each criminal address
        const data = await response.json(); // Parse the JSON response
        return data.results[0].geometry.location; // Return the location data
      }));

      // Calculate distances and update cards
      geocodedLocations.forEach((location, index) => {
        if (criminals[index]._id !== undefined) {
          const distance = haversineDistance(userLocation.lat, userLocation.lng, location.lat, location.lng); // Calculate distance between user and criminal
          criminals[index].distance = distance; // Store the distance in the criminal object
          criminals[index].distanceText = `${distance.toFixed(2)} km`; // Store the formatted distance text in the criminal object

          const card = document.querySelector(`.criminal-card[data-id="${criminals[index]._id}"]`); // Get the card element by data-id
          if (card) {
            card.setAttribute('data-distance', distance); // Set the data-distance attribute on the card element

            const cardContent = card.querySelector('.flex-col'); // Get the card content element
            if (!cardContent.querySelector('.criminal-distance')) {
              const distanceElement = document.createElement('p'); // Create a new paragraph element for the distance
              distanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
              distanceElement.innerText = `Distance: ${distance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
              cardContent.appendChild(distanceElement); // Append the paragraph element to the card content
            }

            const expandedContent = document.querySelector(`#details-${criminals[index]._id} .overflow-y-scroll`); // Get the expanded content element
            if (!expandedContent.querySelector('.criminal-distance')) {
              const expandedDistanceElement = document.createElement('p'); // Create a new paragraph element for the distance
              expandedDistanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
              expandedDistanceElement.innerText = `Distance: ${distance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
              expandedContent.insertBefore(expandedDistanceElement, expandedContent.querySelector('.pb-8')); // Insert the paragraph element before the pb-8 element
            }
          } else {
            console.error(`Card with data-id="${criminals[index]._id}" not found.`); // Log an error if the card element is not found
          }
        } else {
          console.error(`Criminal _id is undefined for index ${index}.`); // Log an error if the criminal _id is undefined
        }
      });

      sortList('distance'); // Sort the list of criminals by distance
    }, async function() {
      // Fallback geolocation using the user's address
      try {
        const userText = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(user.address)}&key=<%= apiKey %>`); // Fetch geocoded data for the user's address
        const userJson = await userText.json(); // Parse the JSON response
        var userAddress = userJson.results[0].geometry.location; // Store the user's location
      } catch (error) {
        // Default to a specific location if geocoding fails
        var userAddress = {
          lat: 49.28341676133127,
          lng: -123.11536009794918
        };
      }

      // Geocode criminal addresses to get their locations
      const geocodedLocations = await Promise.all(criminals.map(async (criminal) => {
        const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(criminal.address)}&key=<%= apiKey %>`); // Fetch geocoded data for each criminal address
        const data = await response.json(); // Parse the JSON response
        return data.results[0].geometry.location; // Return the location data
      }));

      // Calculate distances and update cards
      geocodedLocations.forEach((location, index) => {
        if (criminals[index]._id !== undefined) {
          const distance = haversineDistance(userAddress.lat, userAddress.lng, location.lat, location.lng); // Calculate distance between user and criminal
          criminals[index].distance = distance; // Store the distance in the criminal object
          criminals[index].distanceText = `${distance.toFixed(2)} km`; // Store the formatted distance text in the criminal object

          const card = document.querySelector(`.criminal-card[data-id="${criminals[index]._id}"]`); // Get the card element by data-id
          if (card) {
            card.setAttribute('data-distance', distance); // Set the data-distance attribute on the card element

            const cardContent = card.querySelector('.flex-col'); // Get the card content element
            if (!cardContent.querySelector('.criminal-distance')) {
              const distanceElement = document.createElement('p'); // Create a new paragraph element for the distance
              distanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
              distanceElement.innerText = `Distance: ${distance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
              cardContent.appendChild(distanceElement); // Append the paragraph element to the card content
            }

            const expandedContent = document.querySelector(`#details-${criminals[index]._id} .overflow-y-scroll`); // Get the expanded content element
            if (!expandedContent.querySelector('.criminal-distance')) {
              const expandedDistanceElement = document.createElement('p'); // Create a new paragraph element for the distance
              expandedDistanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
              expandedDistanceElement.innerText = `Distance: ${distance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
              expandedContent.insertBefore(expandedDistanceElement, expandedContent.querySelector('.pb-8')); // Insert the paragraph element before the pb-8 element
            }
          } else {
            console.error(`Card with data-id="${criminals[index]._id}" not found.`); // Log an error if the card element is not found
          }
        } else {
          console.error(`Criminal _id is undefined for index ${index}.`); // Log an error if the criminal _id is undefined
        }
      });

      sortList('distance'); // Sort the list of criminals by distance
    });
  }

  // Function to handle search functionality
  function search(criminals) {
    document.getElementById('searchBar').addEventListener("keydown", async function(e) {
      if (e.key === 'Enter') { // If the Enter key is pressed
        const search = document.getElementById('searchBar').value.toLowerCase(); // Get the search value and convert to lowercase

        // Geocode the search address to get coordinates
        try {
          const searchAddress = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(search)}&key=<%= apiKey %>`); // Fetch geocoded data for the search address
          const searchJson = await searchAddress.json(); // Parse the JSON response
          var searchCoordinate = searchJson.results[0].geometry.location; // Store the search location
        } catch (error) {
          // Default to a specific location if geocoding fails
          var searchCoordinate = {
            lat: 49.28341676133127,
            lng: -123.11536009794918
          };
        }

        // Geocode criminal addresses to get their locations
        const geocodedLocations = await Promise.all(criminals.map(async (criminal) => {
          const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(criminal.address)}&key=<%= apiKey %>`); // Fetch geocoded data for each criminal address
          const data = await response.json(); // Parse the JSON response
          return data.results[0].geometry.location; // Return the location data
        }));

        // Calculate distances and update cards
        geocodedLocations.forEach((location, index) => {
          if (criminals[index]._id !== undefined) {
            const newDistance = haversineDistance(searchCoordinate.lat, searchCoordinate.lng, location.lat, location.lng); // Calculate new distance between search location and criminal
            criminals[index].distance = newDistance; // Store the new distance in the criminal object
            criminals[index].distanceText = `${newDistance.toFixed(2)} km`; // Store the formatted distance text in the criminal object

            const card = document.querySelector(`.criminal-card[data-id="${criminals[index]._id}"]`); // Get the card element by data-id

            if (card) {
              card.setAttribute('data-distance', newDistance); // Set the data-distance attribute on the card element

              const cardContent = card.querySelector('.flex-col'); // Get the card content element
              if (!cardContent.querySelector('.criminal-distance')) {
                const distanceElement = document.createElement('p'); // Create a new paragraph element for the distance
                distanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
                distanceElement.innerText = `Distance: ${newDistance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
                cardContent.appendChild(distanceElement); // Append the paragraph element to the card content
              } else {
                const distanceDiv = cardContent.querySelector('.criminal-distance'); // Get the existing distance element
                distanceDiv.innerText = `Distance: ${newDistance.toFixed(2)} km`; // Update the inner text of the distance element
              }

              const expandedContent = document.querySelector(`#details-${criminals[index]._id} .overflow-y-scroll`); // Get the expanded content element
              if (!expandedContent.querySelector('.criminal-distance')) {
                const expandedDistanceElement = document.createElement('p'); // Create a new paragraph element for the distance
                expandedDistanceElement.classList.add('criminal-distance'); // Add the criminal-distance class to the paragraph element
                expandedDistanceElement.innerText = `Distance: ${newDistance.toFixed(2)} km`; // Set the inner text of the paragraph element to the formatted distance
                expandedContent.insertBefore(expandedDistanceElement, expandedContent.querySelector('.pb-8')); // Insert the paragraph element before the pb-8 element
              } else {
                const distanceDiv = expandedContent.querySelector('.criminal-distance'); // Get the existing distance element
                distanceDiv.innerText = `Distance: ${newDistance.toFixed(2)} km`; // Update the inner text of the distance element
              }
            } else {
              console.error(`Card with data-id="${criminals[index]._id}" not found.`); // Log an error if the card element is not found
            }
          } else {
            console.error(`Criminal _id is undefined for index ${index}.`); // Log an error if the criminal _id is undefined
          }
        });

        currentSortOrder.distance = 'asc'; // Reset the sort order for distance
        sortList('distance'); // Sort the list of criminals by distance
      }
    });
  }

  // Function to display criminal details
  function showCriminalDetail(criminal, id) {
    const detailSection = document.getElementById('details-' + id); // Get the details section element by id

    // Populate detail section with criminal's information
    detailSection.querySelector('#criminalImage').src = criminal.image; // Set the image source
    detailSection.querySelector('#criminalName').innerText = `${criminal.firstName} ${criminal.middleName} ${criminal.lastName}`; // Set the name
    detailSection.querySelector('#criminalAddress').innerText = `Address: ${criminal.address}`; // Set the address
    detailSection.querySelector('#criminalGender').innerText = `Gender: ${criminal.gender}`; // Set the gender

    // Calculate and display criminal's age
    const dob = new Date(criminal.dob); // Parse the date of birth
    const diff_ms = Date.now() - dob.getTime(); // Calculate the difference in milliseconds
    const age_dt = new Date(diff_ms); // Convert the difference to a date object
    const age = Math.abs(age_dt.getUTCFullYear() - 1970); // Calculate the age
    detailSection.querySelector('#criminalAge').innerText = `Age: ${age}`; // Set the age

    // Populate convictions list
    const convictionsList = detailSection.querySelector('#criminalConvictions'); // Get the convictions list element
    convictionsList.innerHTML = ''; // Clear the convictions list
    criminal.convictions.forEach(conviction => { // Iterate over the convictions
      const listItem = document.createElement('div'); // Create a new div element for the conviction
      const convictionDate = new Date(conviction.date); // Parse the conviction date
      listItem.innerHTML = `
        <p class="font-bold underline underline-offset-4"><strong>Crime:</strong> ${conviction.crime}</p>
        <p><strong>Date:</strong> ${convictionDate.toLocaleDateString()}</p>
        <p class="pb-3"><strong>Sentence:</strong> ${conviction.sentence}</p>
      `; // Set the inner HTML of the list item

      convictionsList.appendChild(listItem); // Append the list item to the convictions list
    });
  }

  // Event listener to initialize map and search functionality after DOM content is loaded
  document.addEventListener("DOMContentLoaded", function() {
    const criminals = <%- JSON.stringify(criminals) %>; // Parse the criminals data from the server
    const user = <%- JSON.stringify(user) %>; // Parse the user data from the server
    initMap(criminals, user); // Initialize the map
    search(criminals); // Initialize the search functionality
  });
</script>


<!-- Google Maps API script -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= apiKey %>"></script>
</body>

</html>
