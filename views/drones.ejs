<%- include('templates/header') %>
<style>
    /* Styling for filter and sort buttons */
    #filter,
    #sort {
        display: flex;
        flex-direction: column;
        position: absolute;
        background-color: white;
        color: black;
        border-radius: 100px;
        padding: 4px;
        padding-left: 12px;
        padding-right: 12px;
        width: 50px;
        height: 34px;
        transition-property: all;
        transition-duration: 0.5s;
    }

    /* Expanded state styling for filter and sort buttons */
    .expand {
        border-radius: 10px !important;
        width: 260px !important;
        height: 285px !important;
        box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);
    }

    .expand-sort {
        border-radius: 10px !important;
        width: 260px !important;
        height: 220px !important;
        box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);
    }

    /* Back button styling */
    .back-button {
        position: absolute;
        top: 60px;
        left: 0px;
    }

    /* Styling for range slider */
    .noUi-target,
    .noUi-ltr,
    .noUi-horizontal {
        height: 7px;
        width: 90%;
    }

    .range-slider .noUi-connect,
    .range-slider .noUi-connects,
    .range-slider .noUi-base {
        height: 7px;
    }

    .range-slider .noUi-handle {
        height: 18px;
        width: 18px;
        top: -5px;
        right: -9px;
        border-radius: 9px;
    }

    .range-slider {
        height: 10px;
    }

    .range-slider .noUi-connect {
        background: #0891b2;
    }

    .range-slider .noUi-handle {
        height: 18px;
        width: 18px;
        top: -5px;
        right: -9px;
        border-radius: 9px;
    }
</style>

<!-- Back button to navigate to previous page -->
<a href="/protection" class="back-button">
    <span
        class="material-symbols-outlined absolute top-0 left-0 mt-4 ml-4 inline-block px-3 py-1 bg-[#515F84] rounded-lg text-[#EAD797]">
        arrow_back_ios
    </span>
</a>

<!-- Page title -->
<div class="flex justify-center mt-32 mb-14">
    <h1 class="font-bold text-white text-4xl">Security Drones</h1>
</div>

<!-- Container for filter and sort buttons -->
<div class="container flex mb-8">
    <!-- Filter button -->
    <div class="ms-4">
        <button class="shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] z-10" id="filter">
            <span class="material-symbols-outlined"> filter_alt </span>
        </button>
    </div>

    <!-- Sort button -->
    <div class="ms-12 ps-2">
        <button class="shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)]" id="sort">
            <span class="material-symbols-outlined"> Sort </span>
        </button>
    </div>
</div>

<!-- Container for drone cards -->
<div id="drone-container" class="flex flex-wrap items-center" data-drones="<%- JSON.stringify(drones) %>">
    <% drones.forEach(function(drone) { %>
    <div class="item m-4 w-full bg-white h-full shadow-[0_0px_10px_0px_rgba(0,0,0,0.5)] rounded-lg overflow-hidden text-center"
        data-manufacturer="<%= drone.manufacturer %>" data-type="<%= drone.type %>" data-price="<%= drone.price %>">
        <div class="p-6 flex justify-between flex-col">
            <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                Model
            </h2>
            <h1 class="title-font text-lg font-medium text-gray-900 mb-3">
                <%= drone.model %>
            </h1>
            <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                Manufacturer
            </h2>
            <p class="leading-relaxed mb-3">
                <%= drone.manufacturer %>
            </p>
            <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                Price
            </h2>
            <p class="leading-relaxed mb-3">$<%= drone.price %> / month</p>
            <h2 class="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">
                Type
            </h2>
            <p class="leading-relaxed mb-3">
                <%= drone.type %>
            </p>
            <button type="button" data-modal-toggle="drone-modal" id="<%=drone.id %>"
                class="orderBtn flex bg-cyan-600 px-4 py-2 mt-2 mx-12 justify-center text-white font-bold rounded-full">
                Place an Order
            </button>
        </div>
    </div>
    <% }); %>
</div>

<%- include('templates/orderSummary', { user: user, btnClass: "orderBtn" } ) %>
<%- include('templates/footer') %>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const filterBtn = document.getElementById("filter");
        const sortBtn = document.getElementById("sort");

        // Initial states for filter and sort buttons
        const initialFilterHTML = filterBtn.innerHTML;
        const initialFilterWidth = filterBtn.style.width;
        const initialFilterHeight = filterBtn.style.height;

        const initialSortHTML = sortBtn.innerHTML;
        const initialSortWidth = sortBtn.style.width;
        const initialSortHeight = sortBtn.style.height;

        // Function to expand the filter button and show filter options
        function expandFilter() {
            filterBtn.classList.toggle("expand");
            if (filterBtn.classList.contains("expand")) {
                collapseSort();
                filterBtn.removeEventListener("click", expandFilter);
                setTimeout(() => {
                    filterBtn.innerHTML = `
                        <div class='w-full flex justify-start pt-2'>
                            <button id='closeButton'>
                                <span class='material-symbols-outlined'>
                                    close
                                </span>
                            </button>
                        </div>
                        <div class='text-start w-full h-full flex flex-col justify-between gap-5 p-3'>
                            <div class="range-slider">
                                <label for="priceRange">Price: </label>
                                <div id="priceRange"></div>
                                <div>
                                    <span id="minPriceValue">0</span> -
                                    <span id="maxPriceValue">5000</span>
                                </div>
                            </div>
                            <div class="mt-[20px]">
                                <label for='manufacturerFilter'>Manufacturer: </label>
                                <select id='manufacturerFilter'>
                                    <option value=''>All</option>
                                    <% uniqueManufacturers.forEach(manufacturer => { %>
                                        <option value='<%= manufacturer %>'><%= manufacturer %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div>
                                <label for='typeFilter'>Type: </label>
                                <select id='typeFilter'>
                                    <option value=''>All</option>
                                    <% uniqueTypes.forEach(type => { %>
                                        <option value='<%= type %>'><%= type %></option>
                                    <% }); %>
                                </select>
                            </div>
                            <div class="flex justify-end">
                                <button id="filterOkButton" class="flex justify-center items-center w-10 bg-blue-500 text-white rounded px-4 py-2 mt-2">OK</button>
                            </div>
                        </div>
                    `;
                    const closeBtn = filterBtn.querySelector("#closeButton");
                    closeBtn.addEventListener("click", expandFilter);
                    const filterOkButton = filterBtn.querySelector("#filterOkButton");
                    filterOkButton.addEventListener("click", filterdrones);
                    document.addEventListener("click", closeFilterOnClickOutside);

                    // Initialize noUiSlider
                    var priceSlider = document.getElementById('priceRange');
                    noUiSlider.create(priceSlider, {
                        start: [0, 5000],
                        connect: true,
                        range: {
                            'min': 0,
                            'max': 5000
                        },
                        step: 100,
                        tooltips: [false, false],
                        format: {
                            to: function (value) {
                                return parseInt(value);
                            },
                            from: function (value) {
                                return parseInt(value);
                            }
                        }
                    });

                    priceSlider.noUiSlider.on('update', function (values, handle) {
                        document.getElementById('minPriceValue').innerText = values[0];
                        document.getElementById('maxPriceValue').innerText = values[1];
                    });

                }, 300);
            } else {
                resetFilter();
                filterBtn.innerHTML = initialFilterHTML;
                filterBtn.addEventListener("click", expandFilter);
                filterBtn.removeEventListener("click", expandFilter);
                document.removeEventListener("click", closeFilterOnClickOutside);
            }
        }

        // Function to collapse the sort button and reset its content
        function collapseSort() {
            sortBtn.classList.remove("expand-sort");
            sortBtn.innerHTML = initialSortHTML;
            sortBtn.removeEventListener("click", collapseSort);
            sortBtn.addEventListener("click", expandSort);
        }

        // Function to collapse the filter button and reset its content
        function collapseFilter() {
            filterBtn.classList.remove("expand");
            filterBtn.innerHTML = initialFilterHTML;
            filterBtn.removeEventListener("click", collapseFilter);
            filterBtn.addEventListener("click", expandFilter);
        }

        // Function to close the filter when clicking outside of it
        function closeFilterOnClickOutside(event) {
            if (!filterBtn.contains(event.target) && filterBtn.classList.contains("expand")) {
                collapseFilter();
                document.removeEventListener("click", closeFilterOnClickOutside);
            }
        }

        // Function to close the sort when clicking outside of it
        function closeSortOnClickOutside(event) {
            if (!sortBtn.contains(event.target) && sortBtn.classList.contains("expand-sort")) {
                collapseSort();
                document.removeEventListener("click", closeSortOnClickOutside);
            }
        }

        // Function to filter drones based on selected criteria
        function filterdrones() {
            const selectedManufacturer = document.getElementById('manufacturerFilter').value;
            const selectedType = document.getElementById('typeFilter').value;
            const priceRange = document.getElementById('priceRange').noUiSlider.get();
            const minPrice = parseInt(priceRange[0]);
            const maxPrice = parseInt(priceRange[1]);

            const droneContainer = document.getElementById("drone-container");
            const drones = droneContainer.querySelectorAll(".item");

            drones.forEach(drone => {
                const manufacturer = drone.getAttribute('data-manufacturer');
                const type = drone.getAttribute('data-type');
                const price = parseInt(drone.getAttribute('data-price'));

                if ((selectedManufacturer === '' || manufacturer === selectedManufacturer) &&
                    (selectedType === '' || type === selectedType) &&
                    (price >= minPrice && price <= maxPrice)) {
                    drone.style.display = 'block';
                } else {
                    drone.style.display = 'none';
                }
            });

            collapseFilter();
        }

        // Function to reset filter criteria
        function resetFilter() {
            document.getElementById('manufacturerFilter').value = '';
            document.getElementById('typeFilter').value = '';
            document.getElementById('priceRange').noUiSlider.set([0, 5000]);
        }

        // Event listeners for filter and sort buttons
        filterBtn.addEventListener("click", expandFilter);
        sortBtn.addEventListener("click", expandSort);
    });
</script>
